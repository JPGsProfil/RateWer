package com.example.wlg.ratewer.Model;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * list of attributs generated by cardlist
 */
public class AttributList
{
    public List<StringsToDisplayAttributes> attriList = new ArrayList<>();


    //private String jsonAttriString;

    /**
     * generate a new list depending on given cardlist
     * @param _cardList given cardlist
     */
    public AttributList(CardList _cardList)
    {
        //jsonAttriString = _jsonAttriString;
        //FillAttributeList(jsonAttriString);
        FillAttributeListFromCardList(_cardList);
    }

    /**
     * copy constructor
     * @param _attributList source
     */
    public AttributList(AttributList _attributList)
    {
        for(int index=0; index < _attributList.attriList.size(); index ++)
        {
            StringsToDisplayAttributes newEntry = new StringsToDisplayAttributes(_attributList.attriList.get(index));
            attriList.add(newEntry);
        }
    }

    /**
     * iterate list to find out if card has target value (e.g. black hair)
     * necessary because position of category (hair) unknown (dynamic)
     * @param _attr attribute
     * @param _val  value
     * @return true if contains, else false
     */
    public boolean contains(String _attr, String _val)
    {
        for(int i=0; i<attriList.size(); i++)
        {
            if(attriList.get(i).attr.equals(_attr))
            {
                if(attriList.get(i).value.equals(_val))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
        }
        return false;
    }


    /**
     * dynamic generate attributelist depending on remaining cards
     * @param _cardList attributes from this list used to fill attributelist
     */
    private void FillAttributeListFromCardList(CardList _cardList)
    {
        List<AttribValue> attribValueList = new ArrayList<>();
        //KeyValuesUnique.add(new AttribValue("ja","n"));

        for(int index1 = 0; index1 < _cardList.GetSize(); index1 ++)
        {
            for(int iValues = 0; iValues < _cardList.Get(0).attriList.size(); iValues ++)
            {
                String curAttrib    = _cardList.Get(index1).attriList.get(iValues).attr;
                String curValue     = _cardList.Get(index1).attriList.get(iValues).value;
                AttribValue newAttribValue = new AttribValue(curAttrib,curValue);
                // check whether list contains this key value
                if(!attribValueList.contains(newAttribValue))
                {
                    attribValueList.add(newAttribValue);
                }
            }
        }

        // to display in cathegories and order (menu)
        Collections.sort(attribValueList);
        // debugging: display if works:
        //System.out.println("Print Set!!!!!");
        //for(int index = 0; index <attribValueList.size(); index++)
        //{
        //    System.out.println(attribValueList.get(index).attr+"   "+attribValueList.get(index).value);
        //}


        String prevAttrib = "-1";
        int curGroupId = 0;
        // now we know how many values contain to one attribute -> make list with groupid ...
        for(int index = 0; index < attribValueList.size(); index ++)
        {
            if(!attribValueList.get(index).attr.equals(prevAttrib))
            {
                curGroupId++;
            }
            String curAttr = attribValueList.get(index).attr;
            String curValue = attribValueList.get(index).value;

            attriList.add(new StringsToDisplayAttributes(curAttr, curValue,curGroupId));
            prevAttrib =curAttr;
        }

    }



    public List<String> GetValuesForAnAttribute(String _attribute)
    {
        List<String> valueList = new ArrayList();
        for(int index = 0; index < attriList.size(); index++)
        {
            if(attriList.get(index).attr.equals(_attribute))
            {
                valueList.add(attriList.get(index).value);
            }
        }
        return valueList;

    }



    /* old version, read from separate json-object
    private void FillAttributeList(String jsonAttriString)
    {
        //System.out.println("jsonString "+jsonAttriString);
        try
        {
            JSONObject JSONcomplete = new JSONObject(jsonAttriString);
            JSONObject attribandquestions = JSONcomplete.getJSONObject("attribandquestions");
            //JSONObject reader = new JSONObject(jsonAttriString);
            JSONObject jkategories  = attribandquestions.getJSONObject("attributes");

            // Get questions
            JSONObject jquestions = attribandquestions.getJSONObject("questionobj");
            JSONArray jquestionsArray  = jquestions.getJSONArray("questions");

            // end of: get questions


            Iterator curCategoryIt = jkategories.keys();
            int groupId = 1;
            while (curCategoryIt.hasNext())
            {
                String curCat = (String) curCategoryIt.next();
                //System.out.println("Kathegory: "+curCat);
                String question = jquestionsArray.get(groupId-1).toString();
                JSONArray values  = jkategories.getJSONArray(curCat);
                for(int i=0;i<values.length(); i++)
                {
                    String val = values.get(i).toString();
                    int groupminus1=groupId-1;
                    System.out.println("groupId-1 "+groupminus1);
                    System.out.println("Kathegory " + curCat + "  values: " + val + "  Groupid " + groupId + " Frage: "+question);
                    if( jquestionsArray.length() >= groupId)
                    {
                        attriList.add(new StringsToDisplayAttributes(curCat, val, question ,groupId));
                    }
                    else
                    {
                        // json file incorrect, fill Question with "Frage 1,2,3,...)
                        String Frage = "Frage"+i;
                        attriList.add(new StringsToDisplayAttributes(curCat, val,Frage,groupId));
                    }
                }
                groupId++;
            }



        }
        catch (Exception e)
        {
            e.printStackTrace();
        }


    }*/

}
